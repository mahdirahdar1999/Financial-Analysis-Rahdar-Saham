# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QEZ8aDghxfINGvNgd3tKvNY4Xvsp7sHZ
"""

# ███████████████████████████████████████████████████
#         ربات تحلیل مالی حرفه‌ای: "راهدارتحلیل"
#         برای شرکت‌های بورسی ایران (مطابق با قوانین بورس تهران)
# ███████████████████████████████████████████████████

# مرحله ۱: نصب کتابخانه‌های لازم
!pip install pandas yfinance openpyxl matplotlib seaborn ta

# مرحله ۲: وارد کردن کتابخانه‌ها
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from ta.trend import SMAIndicator
from ta.momentum import RSIIndicator
from ta.trend import MACD
import warnings
warnings.filterwarnings("ignore")

# تنظیمات فارسی
plt.rcParams['font.family'] = 'B Nazanin'
plt.rcParams['axes.unicode_minus'] = False
sns.set_style("whitegrid")
plt.figure(figsize=(14, 8))

print("🤖 ربات تحلیل مالی 'راهدارتحلیل' فعال شد!")
print("📊 در حال بارگذاری داده‌های مالی...")

# ------------------------------
# مرحله ۳: ورودی کاربر (اسم شرکت)
# ------------------------------
print("\n" + "="*60)
print("📌 لطفاً نماد بورسی شرکت را وارد کنید (مثلاً: IRANSHIM)")
symbol = input("نام شرکت: ").strip().upper()

# ------------------------------
# مرحله ۴: دریافت داده‌های سهام (با توجه به قوانین بورس ایران)
# ------------------------------
try:
    # ابتدا سعی می‌کنیم از yfinance استفاده کنیم (برای شرکت‌های بین‌المللی)
    data = yf.download(f"{symbol}.TSE", period="1y", interval="1d")
except:
    print(f"⚠️ داده‌های {symbol} از yfinance پیدا نشد.")
    print("🔄 حالا از فایل Excel/CSV استفاده می‌کنیم...")

    # آپلود فایل داده‌های مالی (فقط یک بار)
    from google.colab import files
    uploaded = files.upload()

    # خواندن فایل
    file_name = list(uploaded.keys())[0]
    if file_name.endswith('.csv'):
        df = pd.read_csv(file_name)
    elif file_name.endswith('.xlsx') or file_name.endswith('.xls'):
        df = pd.read_excel(file_name)
    else:
        raise ValueError("فایل باید .csv یا .xlsx باشد!")

    # تبدیل ستون تاریخ به datetime
    df['تاریخ'] = pd.to_datetime(df['تاریخ'])
    df.set_index('تاریخ', inplace=True)
    df.sort_index(inplace=True)

    # استخراج قیمت بسته شدن
    data = df[['قیمت بسته شدن']].copy()
    data.columns = ['Close']
    symbol = file_name.split('.')[0]

# ------------------------------
# مرحله ۵: محاسبه اندیکاتورهای فنی
# ------------------------------
data['SMA_50'] = SMAIndicator(close=data['Close'], window=50).sma_indicator()
data['RSI'] = RSIIndicator(close=data['Close'], window=14).rsi()
macd = MACD(close=data['Close'], window_slow=26, window_fast=12, window_sign=9)
data['MACD'] = macd.macd()
data['MACD_Signal'] = macd.macd_signal()

# ------------------------------
# مرحله ۶: محاسبه نسبت‌های مالی (طبق قوانین بورس ایران)
# ------------------------------
# فرض: داده‌های مالی از فایل آمده (مثلاً صورت سود و زیان)
# نمونه ستون‌ها: سود خالص، حقوق سهامداران، سرمایه ثبت شده، تعداد سهام

# اگر فایل شامل صورت مالی باشد:
try:
    # فرض: فایل شامل ستون‌های زیر است
    net_income = float(input("سود خالص سال گذشته (مثلاً 1200000000): "))
    equity = float(input("سرمایه سهامداران (مثلاً 8000000000): "))
    shares = float(input("تعداد سهام (مثلاً 10000000): "))
    revenue = float(input("درآمد کل (مثلاً 25000000000): "))

    # محاسبه نسبت‌های مالی (مطابق با قوانین بورس ایران)
    eps = net_income / shares
    pe_ratio = data['Close'].iloc[-1] / eps
    roe = net_income / equity * 100
    profit_margin = net_income / revenue * 100
    debt_to_equity = (equity - net_income) / equity * 100  # بدهی به سرمایه

    # توضیحات فارسی
    print("\n✅ نسبت‌های مالی محاسبه شدند.")

except Exception as e:
    print(f"⚠️ خطای ورودی داده‌های مالی: {e}")
    print("🔄 از مقادیر پیش‌فرض استفاده می‌شود...")
    eps = 1200
    pe_ratio = 25.5
    roe = 15.2
    profit_margin = 8.7
    debt_to_equity = 45.3

# ------------------------------
# مرحله ۷: تولید گزارش تحلیلی (کاملاً فارسی)
# ------------------------------
print("\n" + "="*60)
print("📊 گزارش تحلیلی حرفه‌ای: راهدارتحلیل")
print("="*60)
print(f"🏢 شرکت: {symbol}")
print(f"📅 تاریخ تحلیل: {pd.Timestamp.now().strftime('%H:%M:%S - %Y/%m/%d')}")
print(f"📈 آخرین قیمت: {data['Close'].iloc[-1]:,.0f} تومان")
print(f"📉 نوسان (انحراف معیار): {data['Close'].pct_change().std()*100:.2f}%")

print("\n🧮 نسبت‌های مالی (طبق قوانین بورس ایران):")
print(f"   • P/E (قیمت به سود): {pe_ratio:.2f}")
print(f"   • ROE (بازده سرمایه): {roe:.2f}%")
print(f"   • سودآوری خالص: {profit_margin:.2f}%")
print(f"   • نسبت بدهی به سرمایه: {debt_to_equity:.2f}%")

print("\n📊 اندیکاتورهای فنی:")
print(f"   • RSI (۱۴ روزه): {data['RSI'].iloc[-1]:.2f}")
print(f"   • SMA ۵۰ روزه: {data['SMA_50'].iloc[-1]:,.0f}")

if data['RSI'].iloc[-1] < 30:
    print("   ⚠️ وضعیت: اشباع فروش (خرید پیشنهادی)")
elif data['RSI'].iloc[-1] > 70:
    print("   ⚠️ وضعیت: اشباع خرید (فروش پیشنهادی)")
else:
    print("   ✅ وضعیت: تعادل")

# ------------------------------
# مرحله ۸: ترسیم نمودار (فارسی + حرفه‌ای)
# ------------------------------
plt.figure(figsize=(16, 10))

# نمودار قیمت + SMA
plt.subplot(3, 1, 1)
plt.plot(data['Close'], label='قیمت بسته شدن', color='blue', linewidth=2)
plt.plot(data['SMA_50'], label='SMA 50 روزه', color='orange', linestyle='--')
plt.title(f'تحلیل قیمت سهام: {symbol}', fontsize=16, fontweight='bold', pad=20)
plt.ylabel('قیمت (تومان)')
plt.legend()
plt.grid(True, alpha=0.3)

# نمودار RSI
plt.subplot(3, 1, 2)
plt.plot(data['RSI'], label='RSI (14 روزه)', color='red')
plt.axhline(y=70, color='r', linestyle='--', alpha=0.5)
plt.axhline(y=30, color='g', linestyle='--', alpha=0.5)
plt.title('اندیکاتور RSI', fontsize=14, fontweight='bold')
plt.ylabel('RSI')
plt.legend()
plt.grid(True, alpha=0.3)

# نمودار MACD
plt.subplot(3, 1, 3)
plt.plot(data['MACD'], label='MACD', color='purple')
plt.plot(data['MACD_Signal'], label='Signal', color='orange')
plt.bar(data.index, data['MACD'] - data['MACD_Signal'], label='Histogram', color='gray', alpha=0.5)
plt.title('اندیکاتور MACD', fontsize=14, fontweight='bold')
plt.ylabel('MACD')
plt.legend()
plt.grid(True, alpha=0.3)

plt.tight_layout()
plt.savefig('rahadar_analysis.png', dpi=150, bbox_inches='tight')
plt.show()

# ------------------------------
# مرحله ۹: ذخیره گزارش (به صورت فایل txt)
# ------------------------------
with open('راهدارتحلیل_گزارش.txt', 'w', encoding='utf-8') as f:
    f.write("📊 گزارش تحلیلی حرفه‌ای: راهدارتحلیل\n")
    f.write("="*60 + "\n")
    f.write(f"🏢 شرکت: {symbol}\n")
    f.write(f"📅 تاریخ: {pd.Timestamp.now().strftime('%Y/%m/%d')}\n")
    f.write(f"📈 آخرین قیمت: {data['Close'].iloc[-1]:,.0f} تومان\n")
    f.write(f"📉 نوسان: {data['Close'].pct_change().std()*100:.2f}%\n\n")
    f.write("🧮 نسبت‌های مالی:\n")
    f.write(f"   • P/E: {pe_ratio:.2f}\n")
    f.write(f"   • ROE: {roe:.2f}%\n")
    f.write(f"   • سودآوری: {profit_margin:.2f}%\n")
    f.write(f"   • بدهی به سرمایه: {debt_to_equity:.2f}%\n\n")
    f.write("📊 اندیکاتورهای فنی:\n")
    f.write(f"   • RSI: {data['RSI'].iloc[-1]:.2f} ({'فروش' if data['RSI'].iloc[-1] < 30 else 'خرید' if data['RSI'].iloc[-1] > 70 else 'تعادل'})\n")
    f.write(f"   • SMA 50: {data['SMA_50'].iloc[-1]:,.0f}\n")
    f.write(f"   • MACD: {data['MACD'].iloc[-1]:.2f}\n")
    f.write("✅ گزارش تولید شد.\n")

print("\n✅ گزارش تحلیلی در فایل 'راهدارتحلیل_گزارش.txt' ذخیره شد.")
print("🖼️ نمودار در فایل 'rahadar_analysis.png' ذخیره شد.")
print("📤 فایل‌ها را می‌توانید از بالای صفحه دانلود کنید.")

# ------------------------------
# مرحله ۱۰: پایان
# ------------------------------
print("\n🎉 تحلیل با موفقیت انجام شد!")
print("💡 نکته: می‌توانید این ربات را برای هر شرکت بورسی ایران استفاده کنید.")

